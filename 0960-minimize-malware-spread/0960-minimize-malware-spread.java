class Solution {
    public int dfs(int[][] graph,int node,boolean[] vis,boolean[] arr){
        if(arr[node]){
            return 0;
        }
        vis[node]=true;
        int ans=1;
        for(int i=0;i<graph[node].length;i++){
            if(!vis[i]&&graph[node][i]==1){
                int count=dfs(graph,i,vis,arr);
                if(count==0){
                    return 0;
                }
                ans+=count;
            }
        }
        return ans;
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int n=graph.length;
        int ans=initial[0];
        int max=0;
        boolean[] arr=new boolean[n];
        for(int it:initial){
            arr[it]=true;
        }
        for(int it:initial){
            arr[it]=false;
            int count=dfs(graph,it,new boolean[n],arr);
            if(count>max){
                max=count;
                ans=it;
            }
            arr[it]=true;
        }
        return ans;
    }
}